// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: pdf_to_image.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ImageFormat int32

const (
	ImageFormat_UNKNOWN ImageFormat = 0
	ImageFormat_JPEG    ImageFormat = 1
	ImageFormat_PNG     ImageFormat = 2
	ImageFormat_SVG     ImageFormat = 3
)

// Enum value maps for ImageFormat.
var (
	ImageFormat_name = map[int32]string{
		0: "UNKNOWN",
		1: "JPEG",
		2: "PNG",
		3: "SVG",
	}
	ImageFormat_value = map[string]int32{
		"UNKNOWN": 0,
		"JPEG":    1,
		"PNG":     2,
		"SVG":     3,
	}
)

func (x ImageFormat) Enum() *ImageFormat {
	p := new(ImageFormat)
	*p = x
	return p
}

func (x ImageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_pdf_to_image_proto_enumTypes[0].Descriptor()
}

func (ImageFormat) Type() protoreflect.EnumType {
	return &file_pdf_to_image_proto_enumTypes[0]
}

func (x ImageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageFormat.Descriptor instead.
func (ImageFormat) EnumDescriptor() ([]byte, []int) {
	return file_pdf_to_image_proto_rawDescGZIP(), []int{0}
}

type PdfToImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   []byte      `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Format ImageFormat `protobuf:"varint,2,opt,name=format,proto3,enum=protos.ImageFormat" json:"format,omitempty"`
}

func (x *PdfToImageRequest) Reset() {
	*x = PdfToImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_to_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfToImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfToImageRequest) ProtoMessage() {}

func (x *PdfToImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_to_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfToImageRequest.ProtoReflect.Descriptor instead.
func (*PdfToImageRequest) Descriptor() ([]byte, []int) {
	return file_pdf_to_image_proto_rawDescGZIP(), []int{0}
}

func (x *PdfToImageRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *PdfToImageRequest) GetFormat() ImageFormat {
	if x != nil {
		return x.Format
	}
	return ImageFormat_UNKNOWN
}

type PdfToImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pages [][]byte `protobuf:"bytes,1,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *PdfToImageResponse) Reset() {
	*x = PdfToImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pdf_to_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PdfToImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PdfToImageResponse) ProtoMessage() {}

func (x *PdfToImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pdf_to_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PdfToImageResponse.ProtoReflect.Descriptor instead.
func (*PdfToImageResponse) Descriptor() ([]byte, []int) {
	return file_pdf_to_image_proto_rawDescGZIP(), []int{1}
}

func (x *PdfToImageResponse) GetPages() [][]byte {
	if x != nil {
		return x.Pages
	}
	return nil
}

var File_pdf_to_image_proto protoreflect.FileDescriptor

var file_pdf_to_image_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x64, 0x66, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0x54, 0x0a, 0x11,
	0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x22, 0x2a, 0x0a, 0x12, 0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x2a, 0x36,
	0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x50,
	0x45, 0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x56, 0x47, 0x10, 0x03, 0x32, 0x57, 0x0a, 0x11, 0x50, 0x64, 0x66, 0x54, 0x6f, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x50, 0x64, 0x66, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x64, 0x66, 0x54, 0x6f,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x17, 0x5a, 0x15, 0x2e, 0x3b, 0x70, 0x64, 0x66, 0x5f, 0x74, 0x6f, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pdf_to_image_proto_rawDescOnce sync.Once
	file_pdf_to_image_proto_rawDescData = file_pdf_to_image_proto_rawDesc
)

func file_pdf_to_image_proto_rawDescGZIP() []byte {
	file_pdf_to_image_proto_rawDescOnce.Do(func() {
		file_pdf_to_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_pdf_to_image_proto_rawDescData)
	})
	return file_pdf_to_image_proto_rawDescData
}

var file_pdf_to_image_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pdf_to_image_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pdf_to_image_proto_goTypes = []interface{}{
	(ImageFormat)(0),           // 0: protos.ImageFormat
	(*PdfToImageRequest)(nil),  // 1: protos.PdfToImageRequest
	(*PdfToImageResponse)(nil), // 2: protos.PdfToImageResponse
}
var file_pdf_to_image_proto_depIdxs = []int32{
	0, // 0: protos.PdfToImageRequest.format:type_name -> protos.ImageFormat
	1, // 1: protos.PdfToImageService.Convert:input_type -> protos.PdfToImageRequest
	2, // 2: protos.PdfToImageService.Convert:output_type -> protos.PdfToImageResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_pdf_to_image_proto_init() }
func file_pdf_to_image_proto_init() {
	if File_pdf_to_image_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pdf_to_image_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfToImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pdf_to_image_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PdfToImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pdf_to_image_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pdf_to_image_proto_goTypes,
		DependencyIndexes: file_pdf_to_image_proto_depIdxs,
		EnumInfos:         file_pdf_to_image_proto_enumTypes,
		MessageInfos:      file_pdf_to_image_proto_msgTypes,
	}.Build()
	File_pdf_to_image_proto = out.File
	file_pdf_to_image_proto_rawDesc = nil
	file_pdf_to_image_proto_goTypes = nil
	file_pdf_to_image_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PdfToImageServiceClient is the client API for PdfToImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PdfToImageServiceClient interface {
	Convert(ctx context.Context, in *PdfToImageRequest, opts ...grpc.CallOption) (*PdfToImageResponse, error)
}

type pdfToImageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfToImageServiceClient(cc grpc.ClientConnInterface) PdfToImageServiceClient {
	return &pdfToImageServiceClient{cc}
}

func (c *pdfToImageServiceClient) Convert(ctx context.Context, in *PdfToImageRequest, opts ...grpc.CallOption) (*PdfToImageResponse, error) {
	out := new(PdfToImageResponse)
	err := c.cc.Invoke(ctx, "/protos.PdfToImageService/Convert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfToImageServiceServer is the server API for PdfToImageService service.
type PdfToImageServiceServer interface {
	Convert(context.Context, *PdfToImageRequest) (*PdfToImageResponse, error)
}

// UnimplementedPdfToImageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPdfToImageServiceServer struct {
}

func (*UnimplementedPdfToImageServiceServer) Convert(context.Context, *PdfToImageRequest) (*PdfToImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Convert not implemented")
}

func RegisterPdfToImageServiceServer(s *grpc.Server, srv PdfToImageServiceServer) {
	s.RegisterService(&_PdfToImageService_serviceDesc, srv)
}

func _PdfToImageService_Convert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PdfToImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfToImageServiceServer).Convert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PdfToImageService/Convert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfToImageServiceServer).Convert(ctx, req.(*PdfToImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PdfToImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PdfToImageService",
	HandlerType: (*PdfToImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Convert",
			Handler:    _PdfToImageService_Convert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pdf_to_image.proto",
}
